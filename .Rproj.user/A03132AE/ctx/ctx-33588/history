letters[c(key1 + 1:26, 1:key1)]
letters[c((key1 + 1):26, 1:key1)]
# Step One:
alpha <- data.frame(letters)
alpha
# Step One:
alpha <- data.frame(pos = 1:26, letters)
alpha
alpha <- data.frame(letters)
alpha
text_df <- data.frame(text_vec = as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text)))))
text
text = "hello world"
text_df <- data.frame(text_vec = as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text)))))
text_df
text_crypt <- text_df %>%
filter(text_vec %in% letters)
text_df <- data.frame(text_vec = as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text)))))
text_crypt <- text_df %>%
filter(text_vec %in% letters)
text_df
text_crypt <- text_df %>%
filter(text_vec %in% letters)
library(dplyr)
text_crypt <- text_df %>%
filter(text_vec %in% letters)
text_crypt
text_df <- data.frame(pos = 1:str_length(text),
text_vec = as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text)))))
text_crypt <- text_df %>%
filter(text_vec %in% letters)
text_crypt
alpha <- data.frame(letters) %>%
mutate(lkey1 = lag(letters, key1))
alpha
alpha <- data.frame(rep(letters, 2)) %>%
mutate(lkey1 = lag(letters, key1))
alpha <- data.frame(l_orig = rep(letters, 2)) %>%
mutate(l_key1 = lag(l_orig, key1))
alpha
alpha <- data.frame(l_orig = rep(letters, 2)) %>%
mutate(l_key1 = lag(l_orig, key1)) %>%
tidyr::drop_na()
alpha
alpha <- data.frame(l_orig = rep(letters, 2)) %>%
mutate(l_key1 = lag(l_orig, key1)) %>%
tidyr::drop_na() %>%
unique()
alpha
?unique
document()
use_packages("tidyr")
usethis::use_package(tidyr)
usethis::use_package("tidyr")
document()
#' @param text A string
#' @param key1 A numeric value between 1 and 25
#' @param key2 A numeric value between 1 and 25
#' @return A string, converted to lowercase and encrypted
#' @importFrom stringr str_split_fixed str_length str_to_lower
#' @importFrom tidyr drop_na
#' @importFrom dplyr lag
#' @export
#' @examples
#' setcode("hello world", 5, 16)
setcode <- function(text, key1, key2)
{
#alpha <- data.frame(letters)
alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
alpha <- data.frame(l_orig = rep(letters, 2)) %>%
mutate(l_key1 = lag(l_orig, key1)) %>%
drop_na() %>%
unique()
text_df <- data.frame(pos = 1:str_length(text),
text_vec = as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text)))))
text_crypt <- text_df %>%
filter(text_vec %in% letters) %>%
mutate()
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
readme <- paste(text_vec, collapse = '')
return(readme)
}
setcode("test", 1, 3)
#' Encrypt a character string given two numeric keys.
#' @param text A string
#' @param key1 A numeric value between 1 and 25
#' @param key2 A numeric value between 1 and 25
#' @return A string, converted to lowercase and encrypted
#' @importFrom stringr str_split_fixed str_length str_to_lower
#' @importFrom tidyr drop_na
#' @export
#' @examples
#' setcode("hello world", 5, 16)
setcode <- function(text, key1, key2)
{
alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
text_vec <- as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
readme <- paste(text_vec, collapse = '')
return(readme)
}
setcode("hello world", 15, 16)
decode(setcode("hello world", 15, 16), 15, 16)
#' Encrypt a character string given two numeric keys.
#' @param text A string
#' @param key1 A numeric value between 1 and 25
#' @param key2 A numeric value between 1 and 25
#' @return A string, converted to lowercase and encrypted
#' @importFrom stringr str_split_fixed str_length str_to_lower
#' @importFrom tidyr drop_na
#' @export
#' @examples
#' setcode("hello world", 5, 16)
setcode <- function(text, key1, key2)
{
alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
text_vec <- as.vector(str_to_lower(str_split_fixed(text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
return(paste(text_vec, collapse = ''))
}
alpha
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
text_vec
for(i in which(text_vec %in% letters))
{
text_vec[i] <- letters[which(alpha == text_vec[i])]
alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
alpha <- data.frame(chars = letters) %>%
mutate(chars = lag(chars, key1))
alpha
alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars = lag(chars, key1)) %>%
na_drop() %>%
unqiue()
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars = lag(chars, key1)) %>%
tidyr::na_drop() %>%
unqiue()
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unqiue()
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique()
alpha
key1
key1 = 17
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique()
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique()
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique() %>%
arrange(chars)
alpha
key1
key1 = 2
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique() %>%
arrange(chars)
alpha
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>% pull(chars_use)
text_vec[i]
text_vec
text = "hello"
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
text_vec
i = 1
text_vec[i] <- letters[which(alpha == text_vec[i])]
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>% pull(chars_use)
text_vec
str(alpha)
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
unique() %>%
arrange(chars) %>%
mutate_all(as.character)
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>% pull(chars_use)
text_vec
key2
alpha <- alpha %>%
mutate(char_use = lag(char_use, key2))
names(alpha)
alpha <- alpha %>%
mutate(chars_use = lag(char_use, key2))
alpha <- alpha %>%
mutate(chars_use = lag(chars_use, key2))
alpha
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
#text_vec[i] <- letters[which(alpha == text_vec[i])]
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>% pull(chars_use)
alpha <- alpha %>%
mutate(chars_use = lag(chars_use, key2))
#alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
paste(text_vec, collapse = '')
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
arrange(chars) %>%
mutate_all(as.character)
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
#text_vec[i] <- letters[which(alpha == text_vec[i])]
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>% pull(chars_use)
alpha <- alpha %>%
mutate(chars_use = lag(chars_use, key2))
#alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
#text_vec[i] <- letters[which(alpha == text_vec[i])]
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>%
unique() %>% pull(chars_use)
alpha <- alpha %>%
mutate(chars_use = lag(chars_use, key2))
#alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
text_vec
alpha
rep(letters,2)
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
arrange(chars) %>%
mutate_all(as.character)
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(chars, key1)) %>%
tidyr::drop_na() %>%
arrange(chars) %>%
unique() %>%
mutate_all(as.character)
alpha
alpha %>%
bind_rows(alpha)
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
#text_vec[i] <- letters[which(alpha == text_vec[i])]
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>%
unique() %>% pull(chars_use)
alpha <- alpha %>%
bind_rows(alpha) %>%
mutate(chars_use = lag(chars_use, key2)) %>%
drop_na() %>%
unique() %>%
arrange(chars_use)
#alpha <- alpha[c((key2 + 1):length(alpha), 1:(key2))]
}
text_vec
setcode("hello", 2, 3)
document()
usethis::use_package("dplyr")
document()
document()
document()
25!
document()
usethis::use_package("magrittr")
document()
??usethis
?use_test()
usethis::use_test()
document()
test_that("character encryption results in correct number of characters", {
expect_equal(str_length(setcode("hello")), 5)
})
use_package(testthat)
use_package("testthat")
document()
setcode('hello')
document()
devtools::load_all()
document()
setcode("hello world", 14, 15)
decode(setcode("hello world", 14, 15), 14, 15)
#' @param key1 A numeric value between 1 and 25
#' @param key2 A numeric value between 1 and 25
#' @return A string, converted to lowercase and encrypted
#' @importFrom stringr str_split_fixed str_length str_to_lower
#' @importFrom tidyr drop_na
#' @importFrom dplyr mutate bind_rows arrange lag filter mutate_all pull
#' @importFrom magrittr %>%
#' @export
#' @examples
#' setcode("hello world", 5, 16)
setcode <- function(text, key1, key2)
{
alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(.$chars, key1)) %>%
drop_na() %>%
arrange(.$chars) %>%
unique() %>%
mutate_all(as.character)
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
text_vec[i] <- alpha %>% filter(chars == text_vec[i]) %>%
unique() %>% pull(chars_use)
alpha <- alpha %>%
bind_rows(alpha) %>%
mutate(chars_use = lag(chars_use, key2)) %>%
drop_na() %>%
unique() %>%
arrange(chars_use)
}
return(paste(text_vec, collapse = ''))
}
setcode("hello world", 4, 5)
document()
use_package("rlang")
document()
rlang::`.data`
rlang::`.data$`
document()
?setcode
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lag(.data$chars, key1)) %>%
drop_na() %>%
arrange(.data$chars) %>%
unique() %>%
mutate_all(as.character)
alpha
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lead(.data$chars, key1)) %>%
drop_na() %>%
arrange(.data$chars) %>%
unique() %>%
mutate_all(as.character)
alpha
#'
#' Decrypt a character string generated with `setcode()` given two numeric keys.
#' @param text A string
#' @param key1 A numeric value between 1 and 25
#' @param key2 A numeric value between 1 and 25
#' @return A string, converted to lowercase and decrypted
#' @importFrom stringr str_split_fixed str_length str_to_lower
#' @export
#' @examples
#' decode("cjakx preik", 5, 16)
decode <- function(text, key1, key2)
{
#original decode
#alpha <- letters[c((length(letters) - (key1-1)):length(letters),1:(length(letters) - key1))]
#original setcode
#alpha <- letters[c((key1 + 1):length(letters), 1:key1)]
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = lead(.data$chars, key1)) %>%
drop_na() %>%
arrange(.data$chars) %>%
unique() %>%
mutate_all(as.character)
text_vec <- as.vector(
str_to_lower(
str_split_fixed(
text,
pattern = "",
n = str_length(text))))
for(i in which(text_vec %in% letters))
{
text_vec[i] <- alpha %>%
filter(.data$chars == text_vec[i]) %>%
unique() %>%
pull(.data$chars_use)
alpha <- alpha %>%
bind_rows(alpha) %>%
mutate(chars_use = lead(.data$chars_use, key2)) %>%
drop_na() %>%
unique() %>%
arrange(.data$chars_use)
}
readme <- paste(text_vec, collapse = '')
return(readme)
}
setcode("hello world", 4, 5)
decode(setcode("hello world", 4, 5), 4, 5)
document()
document()
create_alpha <- function(goal, key1, key2) {
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = if(goal == "code") {
lag(.data$chars, key1)
} else {
lead(.data$chars, key1)
}) %>%
drop_na() %>%
arrange(.data$chars) %>%
unique() %>%
mutate_all(as.character)
}
create_alpha(goal = "code", 4, 5)
create_alpha <- function(goal, key1, key2) {
alpha <- data.frame(chars = rep(letters, 2)) %>%
mutate(chars_use = if(goal == "code") {
lag(.data$chars, key1)
} else {
lead(.data$chars, key1)
}) %>%
drop_na() %>%
arrange(.data$chars) %>%
unique() %>%
mutate_all(as.character)
return(alpha)
}
create_alpha(goal = "code", 4, 5)
create_alpha(goal = "code", 4, 5)
create_alpha(goal = "code", 4, 5)
create_alpha(goal = "decode", 4, 5)
document()
document()
load_all()
document()
